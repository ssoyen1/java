package super_;

public class Ex2 {

	public static void main(String[] args) {
		/*
		 * 0928
		 * 
		 * < 상속에서의 생성자 >
		 * - 생성자는 상속되지않음
		 * 	 => 생성자 이름은 자신의 클래스 이름과 동일한데
		 * 		만약, 상속받을 경우 생성자 이름이 부모클래스 이름이므로
		 * 		생성자 작성 규칙에 위배됨
		 * - 서브클래스의 인스턴스 생성할 때는, 
		 *   자동으로 슈퍼클래스의 인스턴스를 먼저 생성한 후 서브클래스의 인스턴스가 생성됨
		 * 	 => 이 때, 서브클래스 생성자에서 슈퍼클래스 기본생성자를 자동 호출
		 * 	 => 만약, 슈퍼클래스에 파라미터 생성자만 존재할 경우
		 * 	 	서브클래스 생성자에게 컴파일 에러가 발생하게 된다!
		 *  
		 *  < 생성자 super() >
		 *  - 슈퍼클래스의 생성자를 명시적으로 호출할 때 사용
		 *    => 생성자 this()와 사용방법 및 목적은 동일함
		 *  - 기본 문법 : super([데이터..]);
		 *  
		 *  - 목적1) 슈퍼클래스 생성자 중 특정 생성자를 명시적(직접,강제적)으로 호출할 경우
		 *  		ex) 슈퍼클래스에 기본 생성자없이 파라미터 생성자 호출 불가로 
		 *   			서브클래스 생성자에서 슈퍼클래스 기본 생성자 호출 불가로 
		 *  			컴파일 에러가 발생하는데, 
		 *  			이 때 슈퍼클래스의 파라미터 생성자를 명시적으로 호출하기위해 사용
		 *  
		 *  - 목적2) 슈퍼클래스의 생성자에 멤버변수 초기화 코드가 존재할 경우
		 *  		ex) 서브클래스 생성자에서 슈퍼클래스 멤벆지 초기화하면
		 *  			초기화 코드의 중복이 발생하게 됨.
		 *  			이 때, 슈퍼클래스의 멤버는 슈퍼클래스의 생성자에서, 
		 *  			서브클래스의 멤버는 서브클래스의 생성자에서 초기화하여
		 *  			코드 중복을 제거하기 위해 사용
		 *  
		 *  - 주의 ! 생성자 super()는 반드시 생성자의 첫 문장에서 실행되어야 함
		 *  
		 * 
		 * 
		 */

	}

}

				class Person {
					String name;
					int age;
				
					public Person() {} // 파라미터를 만드는순간 기본생성자를 만들어주지않음
									   // 하지만 밑에 자식은 바로 부모 기본생성자를 찾는데 
									   // 기본생성자가 없으면 오류가 남.
									   // 그러므로 이렇게 따로 만들어주기.
					
					//  파라미터 생성자 단축기 : alt shift s -> o
					public Person(String name, int age) {
						super(); // Object 클래스의 Object() 기본생성자 호출
						this.name = name;
						this.age = age;
						System.out.println("Person(String,int) 생성자 호출됨! ");
					}
					
				}
				
				
				class Student extends Person {
					boolean isStudyMode;
					
					public Student() {
						// 서브클래스의 기본 생성자에서 
						// 슈퍼클래스인 Person 클래스의 기본생성자를 자동 호출하게 되는데
						// 만약, 슈퍼클래스 새성자가 파라미터 생성자만 존재할 경우 오류 발생.
//						super(); // 암묵적으로 생성자내에 포함됨
						// => 그러므로, Person() 생성자 없이 파라미터 생성자만 있을 경우 오류!
						// 따라서, 
						// (해결방법1) 슈퍼클래스에 기본 생성자를 별도로 정의
						// (해결방법2) 서브클래스에서 슈퍼클래스의 파라미터 생성자를 명시적으로 호출
						super("홍길동", 20);
						
					}
				}
				
				
				
				
				
				
				
				
				
				
				
				
